name: ecs-deploy
on: [push]
jobs:
  deploy:
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    permissions:
      contents: read
      id-token: write
    env:
      ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }} #you need to enter env variable on github secrets
      REGION: ap-northeast-1
      ACTION_ROLE: ecs_deploy_gh_actions-gh_actions
      PROJECT_NAME: statice-adv22 # change it
      ENV_NAME: prod #change it
      SVC_COMPOSE_FILE: docker-compose.yml
      SVC_ECS_PARAMS: ecs-params.yml
      SVC_CONTAINER_NAME: main
      SVC_CONTAINER_PORT: 8080
    steps:
      - uses: actions/checkout@v2
      - run: |
          sudo curl -Lo /usr/local/bin/ecs-cli https://amazon-ecs-cli.s3.amazonaws.com/ecs-cli-linux-amd64-latest
          sudo chmod +x /usr/local/bin/ecs-cli
      - uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }} #you need to enter env variable on github secrets
          aws-region: ${{ env.REGION }}
      - name: get-caller-identity shows myrole_A as expected
        run: aws sts get-caller-identity
      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'
          cache: 'gradle'
      - run: |
          chmod +x ./gradlew
          ./gradlew assemble
      - id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - id: build-image
        run: |
          docker build -f ./Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: gradle-spring-boot #change it
          IMAGE_TAG: ${{ github.sha }}
      - id: compose-file
        run: |
          sed -e "s|__IMAGE_NAME__|$IMAGE_NAME|g" $COMPOSE_FILE > $OUT_COMPOSE_FILE
          echo "::set-output name=file::$OUT_COMPOSE_FILE"
        env:
          IMAGE_NAME: ${{ steps.build-image.outputs.image }}
          COMPOSE_FILE: ${{ env.SVC_COMPOSE_FILE }}
          OUT_COMPOSE_FILE: deploy.docker-compose.yml
      - id: target-group
        run: | #change first line of the run
          TARGET_GROUP=$(echo "spring-test-group" | sed -e "s|_|-|g") 
          TARGET_GROUP_ARN=$(aws elbv2 describe-target-groups --names $TARGET_GROUP | jq ".TargetGroups[0].TargetGroupArn" --raw-output)
          echo "::set-output name=arn::$TARGET_GROUP_ARN"
      - run: |
          ecs-cli configure \
            --region $REGION \
            --default-launch-type FARGATE \
            --cluster $CLUSTER \
            --config-name $CLUSTER
        env:
          CLUSTER: test3 #change it
      - run: |
          ecs-cli compose \
            --cluster $CLUSTER \
            --project-name $PROJECT_NAME \
            --file $COMPOSE_FILE \
            --ecs-params $ECS_PARAMS \
          service up \
            --target-groups "targetGroupArn=$TARGET_GROUP_ARN,containerName=$CONTAINER_NAME,containerPort=$CONTAINER_PORT" \
            --tags "application=$PROJECT_NAME" \
            --create-log-groups \
            --timeout 15 \
            --force-deployment
          
          ecs-cli scale \
            --capability-iam\
            --size 2\
            --cluster $CLUSTER \
            --region $REGION 
            

        env:
          CLUSTER: test3 #change it
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          COMPOSE_FILE: ${{ steps.compose-file.outputs.file }}
          ECS_PARAMS: ${{ env.SVC_ECS_PARAMS }}
          TARGET_GROUP_ARN: ${{ steps.target-group.outputs.arn }}
          CONTAINER_NAME: app #${{ env.SVC_CONTAINER_NAME }} change it
          CONTAINER_PORT: ${{ env.SVC_CONTAINER_PORT }}
